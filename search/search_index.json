{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#class-sales","title":"Class Sales","text":"<p>             Bases: <code>BaseModel</code></p> <p>Data model for class Sales.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>EmailStr</code> <p>Buyer's email</p> required <code>date</code> <code>datetime</code> <p>Sale date</p> required <code>price</code> <code>PositiveFloat</code> <p>Unit price of the product</p> required <code>product</code> <code>str</code> <p>Product description</p> required <code>quantity</code> <code>PositiveInt</code> <p>Quantity of products</p> required <code>category</code> <code>CategoryEnum</code> <p>Product category</p> required Source code in <code>src\\contract.py</code> <pre><code>class Sales(BaseModel):\n    \"\"\"\n    Data model for class Sales.\n\n    Args:\n        email (EmailStr): Buyer's email\n        date (datetime): Sale date\n        price (PositiveFloat): Unit price of the product\n        product (str): Product description\n        quantity (PositiveInt): Quantity of products\n        category (CategoryEnum): Product category\n    \"\"\"\n    email: EmailStr\n    date: datetime\n    price: PositiveFloat\n    product: str\n    quantity: PositiveInt\n    category: CategoryEnum\n\n    @field_validator('category')\n    def category_exist_in_enum(cls, error):\n        return error\n</code></pre>"},{"location":"#function-process_excel","title":"Function process_excel","text":"<p>Validates an Excel file and creates a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>uploaded_file</code> <code>UploadedFile object</code> <p>The file to be processed.</p> required <p>Returns:</p> Name Type Description <code>Result_Set</code> <code>DataFrame</code> <p>Returns the dataframe with the Excel data if success, or empty dataframe in case of error.</p> <code>Result</code> <code>boolean</code> <p>True for success, meaning the file was validaded. False in case of unexpected error.</p> <code>Errors</code> <code>[] list </code> <p>Validation errors list.</p> Source code in <code>src\\backend.py</code> <pre><code>def process_excel(uploaded_file):\n    \"\"\"\n    Validates an Excel file and creates a Pandas DataFrame.\n\n    Args:\n        uploaded_file (UploadedFile object): The file to be processed.\n\n    Returns:\n        Result_Set (pd.DataFrame): Returns the dataframe with the Excel data if success, or empty dataframe in case of error.\n        Result (boolean): True for success, meaning the file was validaded. False in case of unexpected error.\n        Errors ([] list ): Validation errors list. \n    \"\"\"\n    try:\n        df = pd.read_excel(uploaded_file)\n        errors = []\n        # check for extra column in excel\n        extra_cols = set(df.columns) - set(Sales.model_fields.keys())\n        if extra_cols:\n            return False, f\"Extra columns detected in the Excel: {', '.join(extra_cols)}\"\n\n        # validate each line with the schema\n        for index, row in df.iterrows():\n            try:\n                _ = Sales(**row.to_dict())\n            except Exception as e:\n                errors.append(f\"Error in line {index + 2}: {e}\")\n\n        # return validation result, errors and the dataframe\n        return df, True, errors\n\n    except ValueError as ve:\n        return df, False, str(ve)\n    # when error returns an empty dataframe and an error\n    except Exception as e:\n        return pd.DataFrame(), f\"Unexpected error: {str(e)}\"\n</code></pre>"},{"location":"#function-excel_to_sql","title":"Function excel_to_sql","text":"<p>Saves a Pandas Dataframe into a database table.</p> <p>Parameters:</p> Name Type Description Default <code>DataFrame</code> <code>DataFrame</code> <p>The dataframe created from the Excel file.</p> required Source code in <code>src\\backend.py</code> <pre><code>def excel_to_sql(df):\n    \"\"\"\n    Saves a Pandas Dataframe into a database table.\n\n    Args:\n        DataFrame (pd.DataFrame): The dataframe created from the Excel file.\n\n    \"\"\"\n    df.to_sql('sales', con=DATABASE_URL, if_exists='replace', index=False)    \n</code></pre>"}]}